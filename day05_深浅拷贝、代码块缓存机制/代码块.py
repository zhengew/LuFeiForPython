# -*- coding: utf-8 -*-
# @author: erwei.zheng
# @file: 代码块.py
# @datatime: 2024/3/18 22:52

# 代码块：
# 代码块是python程序的文本，他是作为一个单元执行的。
# 一个模块，一个函数，一个类，一个文件等都是一个代码块。

# 1. 同一代码块内的缓存机制：
# 前提： 在同一代码块内
# 适用对象： int float str bool
# 对象具体规则：
# - int/float: 任何数字在同一代码块内都会复用
# - bool: True/False在字典中会以0或1的方式存在，并且复用
# - str: 几乎所有的字符串都会符合缓存机制，具体规则如下：
# -- 1. 非乘法得到的字符串都满足代码块缓存机制
# -- 2. 乘法得到的字符串分两种情况：
# -- 2.1 乘数为1时，任何字符串都满足代码块的缓存机制
# -- 2.2 乘数>=2时，仅含大小写字母、数字、下划线且成都小于等于20字符，满足代码块的缓存机制

# 同一代码块内的缓存机制的优点：
# - 提高一些字符串，整数处理人物在时间和空间上的性能；需要值相同的字符串、整数时，直接从字典中取出复用，避免在内存中频繁的创建和销毁，
# - 提升效率，节约内存。

# 2. 不同代码块内的缓存机制（小数据池缓存机制）
# 适用对象： int float str bool
# 对象具体规则：
# - int: -5 ~ 256
# - str:
# -- 1. 字符串的长度为0或1，默认采用小数据池缓存机制
# -- 2. 字符串长度大于1，且只含有大小写字母、数字、下划线时，默认采用小数据池缓存机制
# -- 3. 乘法得到的字符串分两种情况：
# -- 3.1 乘数为1时：
# -- 3.1.1 仅含 大小写字母、数字、下划线，默认采用小数据池缓存机制
# -- 3.1.2 含有非 大小字母、数字、下划线，长度小于等于1或大于1时，都采用小数据池缓存机制
# -- 3.2 乘数大于等于2时：仅含有 大小写字母、数字、下划线，总长度小于等于20时，默认采用小数据池缓存机制
# -- 4.通过内置模块指定驻留： from sys import intern
# -- 指定驻留可以指定任意的字符串加入小数据池中，让其只在内存中创建一个对象，多个变量都是指向这一个字符串。
'''
from sys import intern
a = intern('hello alex!$' * 20)
b = intern('hello alex!$' * 20)
print(a is b, f'字符串指定驻留, a的内存地址:{id(a)}, b的内存地址:{id(b)}') # True 字符串指定驻留, a的内存地址:4349725408, b的内存地址:4349725408
'''
# - bool: 布尔值即使True/False, 无论多少个变量指向 True/False,内存中值存在一个

# 不同代码块的缓存机制(小数据池)的优点：
# - 能够提高一些字符串、整数处理任务在时间和空间上的性能；
# - 需要值相同的字符串或整数时，直接从小数据池中引用，避免频繁的创建和销毁对象，提升效率、节约内存空间；
# - 以空间换时间


# 小结：
# - 如果在同一代码块下，则采用同一代码块的缓存机制。
# - 如果不在同一代码块下，则采用不同代码块的缓存机制(小数据池)



# def func1():
#     return 5
# def func2():
#     return 5
# a = func1()
# b = func2()
# print(a is b, f'不同代码块的缓存机制，a的内存地址:{id(a)}, b的内存地址:{id(b)}') # True 不同代码块的缓存机制，a的内存地址:4306485616, b的内存地址:4306485616


